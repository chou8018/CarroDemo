name: "Build iOS app"

on:
  # manual trigger but change to any supported event
  # see addl: https://www.andrewhoog.com/post/how-to-build-react-native-android-app-with-github-actions/#3-run-build-workflow
  workflow_dispatch:
  push:
    branches:
      - 'pack/**'
      
env:

    CURRENT_ENV: "STAGING" #打包环境

    XCWORKSPACE_NAME: "CarroDemo" #Workspace名称
    PROJSCHEME_NAME: "CarroDemo" #Name of the scheme to be packaged
    
    PROJ_VERSION_DNUMBER: "1.0"
    PROJ_BUIL_DNUMBER: "1"
    COMMIT_LOG: "pack test 007"

    APPLE_ID: "diligencefu@sina.com" #apple id
    APPLE_ID_PSW: "xdvm-tedb-xcvj-huec" #apple id 的特殊密码

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
    
      - name: Install dependencies
        run: |
          /usr/local/bin/pod install
          
#      - name: Build
#        run: |
#          xcodebuild build -workspace $XCWORKSPACE_NAME.xcworkspace -scheme "$PROJSCHEME_NAME" -allowProvisioningUpdates
#          xcodebuild build -project $XCWORKSPACE_NAME.xcodeproj -scheme "$PROJSCHEME_NAME" -allowProvisioningUpdates
      - name: Clean
        run: |
          xcodebuild clean
          
      - name: Archive
        run: |
          xcodebuild -workspace CarroDemo.xcworkspace -scheme "$CarroDemo" -archivePath CarroDemo.xcarchive archive
#      - name: Archive
#        run: |
#          xcodebuild -scheme "CarroDemo" \
#          -archivePath $RUNNER_TEMP/iamgroot.xcarchive \
#          -sdk iphoneos \
#          -configuration Debug \
#          -destination generic/platform=iOS \
#          clean archive

#      - name: export ipa
#        env:
#          EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
#        run: |
#          EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
#          echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
#          xcodebuild -exportArchive -archivePath $RUNNER_TEMP/iamgroot.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build
#
#      - name: Upload application
#        uses: actions/upload-artifact@v2
#        with:
#          name: app
#          path: ${{ runner.temp }}/build/$XCWORKSPACE_NAME.ipa
#          # you can also archive the entire directory
#          # path: ${{ runner.temp }}/build
#          retention-days: 3
#          
#      - name: Upload to App Store
#        run: |
#            xcrun altool --upload-app -f ${{ runner.temp }}/build/$XCWORKSPACE_NAME.ipa -t ios -u ${{ env.APPLE_ID }} -p ${{ env.APPLE_ID_PSW }}

#      - name: Send release info
#        run: |
#          echo "git提交: $COMMIT_LOG"
#          curl -X POST -H "Content-Type: application/json" -d '{"msg_type":"text","content":{"text":"APP Name: ${{env.PROJSCHEME_NAME}} \nPlatform: iOS \nENV:${{env.CURRENT_ENV}} \nVersion: ${{env.PROJ_VERSION_DNUMBER}}(${{env.PROJ_BUIL_DNUMBER}})\n\nUpdates:\n 1.${{env.COMMIT_LOG}}"}}' https://open.larksuite.com/open-apis/bot/v2/hook/f85c8bb2-b5ae-4726-b93c-f1cb29cf8d17
